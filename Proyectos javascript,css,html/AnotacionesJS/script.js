
/*Podemos controlar cu√°ndo queremos salir de un bucle utilizando 
la palabra reservada break. Cuando el int√©rprete de JavaScript
encuentra la palabra break, sale del bucle y contin√∫a ejecutando
el c√≥digo que haya despu√©s.*/
let cuentaAtras = 10

while (cuentaAtras > 0) {
  console.log(cuentaAtras)
  cuentaAtras = cuentaAtras - 1

  // si la cuenta atr√°s es 5, salimos del bucle
  if (cuentaAtras === 5) {
    break // <---- salimos del bucle
  }
}

/*Igual que tenemos la posibilidad de "romper" 
el bucle con break, tambi√©n podemos saltarnos una
iteraci√≥n con continue. Cuando el int√©rprete de JavaScript
encuentra la palabra continue, salta a la siguiente iteraci√≥n del bucle.

let cuentaAtras = 10

while (cuentaAtras > 0) {
  cuentaAtras = cuentaAtras - 1

  // si la cuenta atr√°s es un n√∫mero par...
  if (cuentaAtras % 2 === 0) {
    continue // <---- saltamos a la siguiente iteraci√≥n
  }

  console.log(cuentaAtras)
}*/

/*ANIDACION DE BUCLES
Podemos anidar bucles dentro de otros bucles. 
Imagina que en nuestra cuenta atr√°s para el cohete,
 tenemos que revisar que 3 cosas est√°n en sus par√°metros:
  el ox√≠geno, el combustible y la temperatura.

const NUMERO_REVISIONES = 3
let cuentaAtras = 10

// mientras la cuenta atr√°s sea mayor que 0
while (cuentaAtras > 0) {
  // mostramos el valor de la cuenta atr√°s
  console.log(cuentaAtras)

  // creamos una variable para contar las revisiones realizadas
  // y la inicializamos a cero
  let revisionesRealizadas = 0

  // hasta que no hayamos realizado las 3 revisiones...
  while (revisionesRealizadas < NUMERO_REVISIONES) {
    // y sumamos 1 a las revisiones realizadas
    revisionesRealizadas = revisionesRealizadas + 1
    console.log(revisionesRealizadas + ' revisiones realizadas...')
  }

  // ahora podemos restar 1 a la cuenta atr√°s
  cuentaAtras = cuentaAtras - 1
}*/


/*LA ESTRUCTURA DE CONTROL FOR EN JAVASCRIPT
es muy √∫til para ejecutar una serie de instrucciones
un n√∫mero determinado de veces. A diferencia de while
que usa una condici√≥n para determinar si se ejecuta
o no el bloque de c√≥digo, for usa un contador que
se incrementa en cada iteraci√≥n hasta que se cumple una condici√≥n.

LA SINTAXIS DE FOR ES LA SIGUIENTE:

for (inicializaci√≥n; condici√≥n; actualizaci√≥n) {
  // c√≥digo a ejecutar
}*/

/*EJEMPLO DE USO DE FOR
El siguiente ejemplo muestra c√≥mo se puede
 usar for para imprimir los n√∫meros del 1 al 10:

for (let number = 1; number <= 10; number++) {
  console.log(number)
}*/

/*La inicializaci√≥n es la declaraci√≥n de la variable number
 y la asignaci√≥n del valor 1.
La condici√≥n es que mientras number <= 10, se itera el bucle.
La actualizaci√≥n es number++ que incrementa 
el valor de number en 1 despu√©s de cada iteraci√≥n.*/

for (let i = 10; i >= 0; i--) {
    if (i === 0) {
      console.log('¬°Despegue üöÄ!')
    } else {
      console.log('Faltan ' + i + ' segundos')
    }
  }


  /*CONTINUE Y BREAK
Al igual que en while, for tambi√©n tiene las
palabras reservadas continue y break para
controlar el flujo de ejecuci√≥n del bucle.

Recuerda que continue se usa para saltar
a la siguiente iteraci√≥n del bucle y break
para salir del bucle.

Ejemplo:
  for (let i = 0; i < 10; i++) {
    const esPar = i % 2 === 0
    if (esPar) {
      continue
    }
  
    // Solo mostramos este consola.log si es impar
    console.log(i)
  
    // Salimos del bucle al llegar al 7
    if (i === 7) {
      break
    }
  }*/



  /*BUCLES ANIDADOS CON FOR
Imagina que quieres crear la tabla de multiplicar
del 1 al 10. Para ello, necesitas un bucle que itere 
del 1 al 10 y, dentro de ese bucle, otro bucle que
 itere del 1 al 10. Esto se puede hacer con dos bucles
  for anidados (uno dentro del otro)*/

/*  for (let i = 1; i <= 10; i++) {
    for (let j = 1; j <= 10; j++) {
      const resultado = i * j
      console.log(i + ' x ' + j + ' = ' + resultado)
    }
  }*/


  /*for (let i = 0; i < 10 && i !== 3; i++) {
    console.log('Hola')
  }
Como tenemos la condici√≥nde i !== 3, 
cuando lleguemos ah√≠ dejar√° de iterar.*/





/*En JavaScript podemos recuperar la informaci√≥n
de la hora y la fecha usando el objeto Date.
Este objeto tiene un m√©todo llamado getDay()
que nos devuelve el d√≠a de la semana en formato
num√©rico, siendo 0 el domingo y 6 el s√°bado*/

const dia = new Date().getDay()

// segun el dia de la semana, mostramos un mensaje diferente
switch (dia) {
  case 0:
    console.log("¬°Hoy es domingo! üò¥")
    break
  case 1:
    console.log("¬°Nooo, es lunes! üò¢")
    break
  case 2:
    console.log("¬°Hoy es martes! ü•µ")
    break
  case 3:
    console.log("¬°Hoy es mi√©rcoles! ü§ì")
    break
  default:
    console.log("Se acerca el fin de! üöÄ")
    break
}


/*Muchas veces ver√°s que puedes escribir
 el mismo c√≥digo usando switch o if.
  El ejemplo anterior con un if:*/
/*
const dia = new Date().getDay()

if (dia === 0) {
  console.log("¬°Hoy es domingo! üò¥")
} else if (dia === 1) {
  console.log("¬°Nooo, es lunes! üò¢")
} else if (dia === 2) {
  console.log("¬°Hoy es martes! ü•µ")
} else if (dia === 3) {
  console.log("¬°Hoy es mi√©rcoles! ü§ì")
} else {
  console.log("Se acerca el fin de! üöÄ")
}
A veces es m√°s f√°cil de leer con switch
 y otras con if. ¬°Depende de ti! 
*/



/*Existe un patr√≥n que se usa a veces con switch 
que es switch(true). Esto es, en lugar de 
evaluar una expresi√≥n, eval√∫a una condici√≥n
 ignorando por completo el valor de la expresi√≥n

Por ejemplo:*/

let edad = 25;

switch(true) {
  case (edad >= 18 && edad < 25):
    console.log("Eres mayor de edad y eres joven");
    break;
  case (edad >= 25 && edad < 40):
    console.log("Eres mayor de edad y est√°s en plena madurez");
    break;
  case (edad >= 40):
    console.log("Eres mayor de edad y est√°s en la mejor edad");
    break;
  default:
    console.log("Eres menor de edad");
}

/*Math.random(): devuelve un n√∫mero aleatorio entre 0 y 1, con decimales.*/
/*Math.floor(): redondea un n√∫mero hacia abajo.*/

/*Sabiendo esto, podr√≠amos crear una funci√≥n
 que nos devuelva un n√∫mero aleatorio del 1 al 10:*/

function getRandomNumber() {
  // recuperamos un n√∫mero aleatorio entre 0 y 1
  const random = Math.random() // por ejemplo: 0.6803487380457318

  // lo multiplicamos por 10 para que est√© entre 0 y 10
  const multiplicar = random * 10 // -> 6.803487380457318

  // redondeamos hacia abajo para que est√© entre 0 y 9
  const redondeamos = Math.floor(multiplicar) // -> 6

  // le sumamos uno para que est√© entre 1 y 10
  const resultado = redondeamos + 1 // -> 7

  // devolvemos el resultado
  return resultado
}
console.log(getRandomNumber())
/*Ahora cada vez que llamemos esta 
funcion nos va a dar un numero aleatorio entre 1 y 10 */


/*Vamos a crear una funci√≥n que simule un microondas.
 Le pasaremos el plato, tiempo y potencia.
  Y nos devolver√° el resultado del plato cocinado*/

function cocinarMicroondas(plato, tiempo, potencia) {
  if (plato === 'üê•' && tiempo === 1 && potencia === 5) {
    return 'üçó'
  }

  if (plato === 'ü•ö' && tiempo === 2 && potencia === 3) {
    return 'üç≥'
  }
  return '‚ùå Plato no soportado'
}
/*Si usamos bien los par√°metros,
la funci√≥n funciona correctamente:*/
console.log(cocinarMicroondas('üê•',1,5))// -> üçó

console.log(cocinarMicroondas('ü•ö',2,3))// -> üç≥

/*pero si cambiamos el orden de los par√°metros,
la funci√≥n no funciona:*/
console.log(cocinarMicroondas(5,1,'üê•'))// -> ‚ùå Plato no soportado


/*¬øQUE ES UNA FUNCTION EXPRESSION?
Una function expression es una
funci√≥n que se asigna a una variable. Por ejemplo:*/

/* esto es una function expression
const sum = function (a, b) {
  return a + b
}

/* esto es una declaraci√≥n de funci√≥n
function sum(a, b) {
  return a + b
}

/*Con la function expression, a la funci√≥n 
se asigna a la variable sum. Esto significa
que podemos llamar a la funci√≥n usando el
nombre de la variable:
sum(1, 2) // -> 3*/


/*HOISTING QUE ES?
El hoisting es un t√©rmino que se usa para describir
c√≥mo JavaScript parece que mueve las declaraciones
funciones al principio del c√≥digo, de forma que
las puedes usar incluso antes de declararlas.
Por ejemplo:*/
console.log(sum (1, 2)) // -> 3

function sum(a, b) {
  return a + b
}

/*¬øY qu√© pasa con las function expression?
Pues que no se aplica el hoisting. Por ejemplo:

sum(1, 2) // ‚ùå ReferenceError: sum is not defined

const sum = function (a, b) {
  return a + b
}*/

/* Funciones flecha
La sintaxis b√°sica de una funci√≥n flecha es la siguiente:*/

/*const miFuncionFlecha = () => {
  // c√≥digo a ejecutar
}*/

/*Cuando una funci√≥n flecha tiene una sola expresi√≥n,
podemos omitir las llaves {} y la palabra clave return 
para hacerla a√∫n m√°s corta. Esto se conoce como return
impl√≠cito. Vamos a pasar una funci√≥n regular a una
funci√≥n flecha y vamos a ver c√≥mo se ve finalmente 
con return impl√≠cito:*/

// DECLARACION DE FUNCION REGULAR
function sumar(a, b) {
  return a + b
}

/* FUNCION FLECHA
const sumarFlecha = (a, b) => {
  return a + b
}*/

// Funci√≥n flecha con return impl√≠cito
const sumarFlecha = (a, b) => a + b



//RECURSIVIDAD
/*La recursividad es una t√©cnica de
 programaci√≥n que consiste en que una funci√≥n se llame a s√≠ misma*/

/*Ejemplo de recursividad
Vamos a crear una funci√≥n que cuente desde un n√∫mero hasta cero*/

function cuentaaAtras(numero) {
  // Condici√≥n base: Si el n√∫mero que recibe es
  // menor de 0 entonces salimos de la funci√≥n
  if (numero < 0) {
  return 
 }

  // Si el n√∫mero era mayor o igual a 0, lo mostramos
  console.log(numero)

  // Y llamamos a la funci√≥n con el n√∫mero anterior
  cuentaaAtras(numero - 1)
}
//Si llamamos a la funci√≥n con el n√∫mero 3, el resultado ser√°:
cuentaaAtras(3)
// -> 3
// -> 2
// -> 1
// -> 0
/*La ejecuci√≥n la ver√≠amos as√≠:

cuentaAtras(3) -> (muestra 3)
               \ 
          cuentaAtras(2) -> (muestra 2)
                       \
                  cuentaAtras(1) -> (muestra 1)
                               \
                          cuentaAtras(0) -> (muestra 0)
                                        \
                                   cuentaAtras(-1) -> salida*/

/*USANDO LA RECURSIVIDAD Y DEVOLVIENDO UN VALOR
La recursividad se usa muchas veces para solucionar 
algoritmos. Por ejemplo, vamos a crear una funci√≥n 
que calcule el factorial de un n√∫mero.
                                   
El factorial de un n√∫mero es el resultado
de multiplicar ese n√∫mero por todos los
anteriores hasta llegar a 1. Por ejemplo,
el factorial de 5 es 5 * 4 * 3 * 2 * 1 = 120 */        

function factorial(n) {
  // Condici√≥n base: Si el n√∫mero es 0 o 1, devolvemos 1
  // y no llamamos a la funci√≥n de nuevo
  if (n === 0 || n === 1) {
    return 1
  } else {
    // Si el n√∫mero es mayor que 1, llamamos a la funci√≥n
    return n * factorial(n - 1)
  }
}

console.log(factorial(5)) // -> 120
console.log(factorial(3)) // ->  6

/*factorial(3) --------------------------> 6
        \ 
  3 * factorial(2) ---------------> 6
          \
    2 * factorial(1) -----------> 2
            \
      1 * factorial(0) -------> 1*/



//EJERCICIO DE RECURSIVIDAD
/*Escribe una funci√≥n que calcule la suma de los
primeros n n√∫meros enteros de forma recursiva.
Por ejemplo: suma(3) -> 1 + 2 + 3 = 6

Escribe una funci√≥n que calcule la sucesi√≥nde
Fibonacci de forma recursiva. La sucesi√≥n
de Fibonacci es una serie de n√∫meros que empieza
por 0 y 1 y cada n√∫mero es la suma de los dos
anteriores. Por ejemplo: fibonacci(6) -> 8 (0, 1, 1, 2, 3, 5, 8)*/

/*DECLARACION Y ASIGNACION DE ARRAYS
Para declarar un array usamos los corchetes [] y dentro los 
elementos de la colecci√≥n separados por comas ,.

Por ejemplo, para crear una colecci√≥n de n√∫meros del 1 al 5:

numeros =[1, 2, 3, 4, 5]*/
/*Para asignar un array a una variable, lo hacemos 
igual que con los otros tipos de datos:

const numbers = [1, 2, 3, 4, 5]
let names = ['Dani', 'Miguel', 'Maria']*/

//ACCESO A LOS ELEMENTOS DE UN ARRAY
/*Para acceder a los elementos de un array usamos
 los corchetes [] y dentro el √≠ndice del elemento 
 que queremos acceder. Los √≠ndices empiezan en 0.*/

const numbers = [1, 2, 3, 4, 5]

console.log(numbers[0]) // 1
console.log(numbers[2]) // 3

/*Puedes usar variables para acceder a los elementos de un array.

const numbers = [1, 2, 3, 4, 5]
let index = 2

console.log(numbers[index]) // -> 3*/

//MODIFICAR ELEMENTOS DE UN ARRAY
/*Igual que podemos acceder a los elementos de un array, podemos modificarlos

const numbers = [1, 2, 3, 4, 5]

numbers[0] = 10
numbers[2] = 30

console.log(numbers) //-> [10, 2, 30, 4, 5]*/


/*LA LONGITUD DE UN ARRAY
Puedes conocer la longitud de una colecci√≥n 
de elementos usando la propiedad .length:

const frutas = ["manzana", "pera", "pl√°tano", "fresa"]
console.log(frutas.length) //-> 4*/



/*Tambi√©n puedes cortar su longitud asignando 
un nuevo valor a la propiedad .length:*/

/*const frutas = ["manzana", "pera", "pl√°tano", "fresa"]
frutas.length = 2

console.log(frutas) // -> ["manzana", "pera"]
console.log(frutas.length) // -> 2*/

//METODOS DE ARRAYS
/*Cuando trabajamos con colecciones de elementos,
vamos a querer hacer cosas con ellos. Por ejemplo:
a√±adir un elemento, eliminarlo, buscarlo, etc.
Para ello, los arrays tienen una serie de m√©todos
que nos permiten hacer estas operaciones:*/


//.push()
//El m√©todo .push() nos permite a√±adir un elemento al final de un array:
/*const frutas = ["pl√°tano", "fresa"]
frutas.push("naranja")
console.log(frutas) // -> ["pl√°tano", "fresa", "naranja"]*/

//Adem√°s, el m√©todo .push() devuelve la nueva longitud del array:

const frutas = ["pl√°tano", "fresa"]
console.log(frutas.length) // -> 2

const newLength = frutas.push("naranja")
console.log(newLength) // -> 3
console.log(frutas) // -> ["pl√°tano", "fresa", "naranja"]



/*.pop()
El m√©todo .pop() elimina y devuelve el √∫ltimo elemento de un array:

const frutas = ["pl√°tano", "fresa", "naranja"]
const ultimaFruta = frutas.pop()

console.log(frutas) // ["pl√°tano", "fresa"]
console.log(ultimaFruta) // "naranja"*/


/*.shift()
El m√©todo .shift() elimina y devuelve el primer elemento de un array. Es lo mismo que .pop(), pero con el primer elemento en lugar del √∫ltimo:

const frutas = ["pl√°tano", "fresa", "naranja"]
const primeraFruta = frutas.shift()

console.log(frutas) // ["fresa", "naranja"]
console.log(primeraFruta) // "pl√°tano"*/


/*.unshift()
El m√©todo .unshift() a√±ade un elemento al principio de un array. Es lo mismo que .push(), pero con el primer elemento en lugar del √∫ltimo:

const frutas = ["pl√°tano", "fresa", "naranja"]
frutas.unshift("manzana")

console.log(frutas) // ["manzana", "pl√°tano", "fresa", "naranja"]*/


//CONCATENACION DE ARRAYS
/*Podemos concatenar dos arrays usando el m√©todo concat().

const numbers = [1, 2, 3]
const numbers2 = [4, 5]

const allNumbers = numbers.concat(numbers2)

console.log(allNumbers) // [1, 2, 3, 4, 5]*/

//Otra forma de concatenar arrays es usando el operador ... (spread operator). Este operador propaga los elementos de un array. As√≠ que podr√≠amos hacer lo siguiente:

const numberss = [1, 2, 3]
const numberss2 = [4, 5]

//                    1, 2, 3        4, 5                     
const allNumbers = [...numberss, ...numberss2]

console.log(allNumberss) // [1, 2, 3, 4, 5]